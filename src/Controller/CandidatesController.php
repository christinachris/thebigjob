<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\I18n\Time;
ob_start();
/**
 * Candidates Controller
 *
 * @property \App\Model\Table\CandidatesTable $Candidates
 *
 * @method \App\Model\Entity\Candidate[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class CandidatesController extends AppController
{

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['profileAdd']);
    }
    public function isAuthorized($user = null) {
        if( $this->Auth->user('type')=='Candidate'){
            if (in_array($this->request->action, ['index', 'view','edit','delete','profileView','profileEdit'])) {

                return true;
            }
        }
        else{
            return false;
        }



        return parent::isAuthorized($user);
    }
    public function index()
    {
        $candidates = $this->paginate($this->Candidates);
        $this->set(compact('candidates'));
    }

    /**
     * View method
     *
     * @param string|null $id Candidate id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $candidate = $this->Candidates->get($id, [
            'contain' => ['Applications', 'JobHistories', 'Orders', 'Posts', 'Qualifications', 'Skills']
        ]);

        $this->set('candidate', $candidate);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
//    public function add()
//    {
//        $candidate = $this->Candidates->newEntity();
//        if ($this->request->is('post')) {
//            $candidate = $this->Candidates->patchEntity($candidate, $this->request->getData());
//            if ($this->Candidates->save($candidate)) {
//                $this->Flash->success(__('The candidate has been saved.'));
//
//                return $this->redirect(['action' => 'index']);
//            }
//            $this->Flash->error(__('The candidate could not be saved. Please, try again.'));
//        }
//        $this->set(compact('candidate'));
//    }

    public function applyform($id = null)
    {
        $job = $this->Jobs->get($id, [
            'contain' => ['Applications']
        ]);
        $this->set('job', $job);

        $this->loadModel('Candidates');
        $this->loadModel('Applications');
        $candidate = $this->Candidates->newEntity();
        if ($this->request->is('post')) {
            $candidate = $this->Candidates->patchEntity($candidate, $this->request->getData());

            $myname = $this->request->getData()['file']['name'];
            $mytmp = $this->request->getData()['file']['tmp_name'];
//            $myext = substr(strrchr(($myname), "."), 1);
//            $mypath = "upload/".$myname.".".$myext;
            $mypath = "upload/".$myname;
            $candidate->postname = $myname;
            $candidate->postpath = $mypath;
            $candidate->created = date("Y-m-d H:i:s");
            if (move_uploaded_file($mytmp, WWW_ROOT . $mypath)) {
                $this->Candidates->save($candidate);
//                $application = $this->Applications->newEntity([
//                    'candidate_id' => $candidate->id,
//                    'job_id' => $job->id,
//                    'date' => new DateTime('now')
//                ]);
                return $this->redirect(['action' => 'confirm']);
            }
//            if ($this->Candidates->save($candidate)) {
//                $this->Flash->success(__('The candidate has been saved.'));
//
//                return $this->redirect(['action' => 'index']);
//            }
//            $this->Flash->error(__('The candidate could not be saved. Please, try again.'));
        }



        $this->loadModel('Applications');
        $application = $this->Applications->newEntity();
        if ($this->request->is('post')) {
            $application = $this->Applications->patchEntity($application, $this->request->getData(), [
                'associated' => ['Candidates']
            ]);
            if ($this->Applications->save($application)) {
                $this->Flash->success(__('The application has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The application could not be saved. Please, try again.'));
        }
        $this->set(compact('application'));

//        if ($this->request->is('post')) {
//
////            $myname = $this->request->getData()['file']['name'];
////            $mytmp = $this->request->getData()['file']['tmp_name'];
////            $myext = substr(strrchr(($myname), "."), 1);
////            $mypath = "upload/" . Security::hash($myname) . "." . $myext;
////            $candidate = $this->Candidates->newEntity();
////            $candidate->postname = $myname;
////            $candidate->postpath = $mypath;
////            $candidate->created = date("Y-m-d H:i:s");
//            if (move_uploaded_file($mytmp, WWW_ROOT . $mypath)) {
//                $this->Candidates->save($candidate);
//                return $this->redirect(['action' => 'index']);
//            }
//
//
//        }
        $this->set(compact('candidate'));}


    /**
     * Edit method
     *
     * @param string|null $id Candidate id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $candidate = $this->Candidates->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $candidate = $this->Candidates->patchEntity($candidate, $this->request->getData());
            if ($this->Candidates->save($candidate)) {
                $this->Flash->success(__('The candidate has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The candidate could not be saved. Please, try again.'));
        }
        $this->set(compact('candidate'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Candidate id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $candidate = $this->Candidates->get($id);
        if ($this->Candidates->delete($candidate)) {
            $this->Flash->success(__('The candidate has been deleted.'));
        } else {
            $this->Flash->error(__('The candidate could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function profileAdd($candidateID)
    {
        $this->viewBuilder()->setLayout('default');
        $this->loadModel('Skills');
        $this->loadModel('Qualifications');
        $this->loadModel('JobHistories');
        $candidate = $this->Candidates->get($candidateID, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            // if(isset($this->request->data['btn1'])== 'Save') {
            $candidate = $this->Candidates->patchEntity($candidate, $this->request->getData());
            $candidate->created = Time::now();
            //              $candidate->setDirty('first_name', true);

            if ($this->request->getData()['file']['size'] > 0) {
                $myname = $this->request->getData()['file']['name'];
                $mytmp = $this->request->getData()['file']['tmp_name'];
                $mypath = "/upload/" . $myname;
                $candidate->postname = $myname;
                $candidate->postpath = $mypath;
                move_uploaded_file($mytmp, WWW_ROOT . $mypath);
            }
            //var_dump($this->Candidates->save($candidate));
            // debug( $this->Candidates->save($candidate) );

            if ($this->Candidates->save($candidate)) {
                $this->Flash->success(__('Your profile has been saved.'));


            }

            $index = 0;
            for ($i = 0; $i < sizeof($this->request->getData()['Skills']); $i++) {

                if (!isset($this->request->getData()['Skills'][$index]['name'])) {
                    $index++;
                    $i--;
                } else {
                    $skills = $this->Skills->newEntity();
                    $skills->skill_name = $this->request->getData()['Skills'][$index]['name'];
                    $skills->candidate_id = $candidateID;
                    $index++;
                    $this->Skills->save($skills);

                }
            }

            $index2 = 0;
            for ($i = 0; $i < sizeof($this->request->getData()['Job']); $i++) {

                if (!isset($this->request->getData()['Job'][$index2]['title'])) {
                    $index2++;
                    $i--;
                } else {
                    $job = $this->JobHistories->newEntity();
                    $job->title = $this->request->getData()['Job'][$index2]['title'];
                    $job->candidate_id = $candidateID;
                    $job->company = $this->request->getData()['Job'][$index2]['company'];
                    $job->job_description = $this->request->getData()['Job'][$index2]['desc'];
                    $job->date_start = $this->request->getData()['Job'][$index2]['start'];
                    $job->date_finish = $this->request->getData()['Job'][$index2]['finish'];
                    $index2++;
                    $this->JobHistories->save($job);

                }
            }

            $index3 = 0;
            for ($i = 0; $i < sizeof($this->request->getData()['Qua']); $i++) {

                if (!isset($this->request->getData()['Qua'][$index3]['degree_name'])) {
                    $index3++;
                    $i--;
                } else {
                    $qua = $this->Qualifications->newEntity();
                    $qua->degree_name = $this->request->getData()['Qua'][$index3]['degree_name'];
                    $qua->candidate_id = $candidateID;
                    $qua->degree_level = $this->request->getData()['Qua'][$index3]['degree_level'];
                    $qua->expected_graduation_date = $this->request->getData()['Qua'][$index3]['expected_graduation_date'];
                    $qua->gpa = $this->request->getData()['Qua'][$index3]['gpa'];
                    $qua->major = $this->request->getData()['Qua'][$index3]['major'];
                    $qua->institution = $this->request->getData()['Qua'][$index3]['institution'];
                    $index3++;
                    $this->Qualifications->save($qua);

                }
            }

            return $this->redirect(['controller' => 'users', 'action' => 'login']);
            $this->Flash->error(__('Your profile could not be saved. Please, try again.'));
            }
      //  }
        $this->set(compact('candidate'));
    }

    public function profileView($userID){
        $this->viewBuilder()->setLayout('default');
        $this->loadModel('Skills');
        $this->loadModel('Qualifications');
        $this->loadModel('JobHistories');
        $candidate=$this->Candidates->find('all',['conditions'=>['user_id'=>$userID]])
                    ->contain(['Skills', 'Qualifications','JobHistories'])->toList()[0];
       $this->set('candidate',$candidate);
    }
    public function profileEdit($userID){
        $this->viewBuilder()->setLayout('default');
        $this->loadModel('Skills');
        $this->loadModel('Qualifications');
        $this->loadModel('JobHistories');
        $candidates=$this->Candidates->find('all',['conditions'=>['user_id'=>$userID]])
            ->contain(['Skills', 'Qualifications','JobHistories'])->toList()[0];
        $candidateID=$candidates->id;
        $candidate = $this->Candidates->get($candidateID, [
            'contain' => ['Skills', 'Qualifications','JobHistories']
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $skills = $this->Skills->find('all', ['conditions' => ['candidate_id' => $candidateID]])->toList();
            $qualification = $this->Qualifications->find('all', ['conditions' => ['candidate_id' => $candidateID]])->toList();
            $jobs = $this->JobHistories->find('all', ['conditions' => ['candidate_id' => $candidateID]])->toList();
            for ($i = 0; $i < sizeof($skills); $i++) {
                $this->Skills->delete($skills[$i]);
            }
            $index = 0;
            for ($i = 0; $i < sizeof($this->request->getData()['Skills']); $i++) {

                if (!isset($this->request->getData()['Skills'][$index]['name'])) {
                    $index++;
                    $i--;
                } else {
                    $skills = $this->Skills->newEntity();
                    $skills->skill_name = $this->request->getData()['Skills'][$index]['name'];
                    $skills->candidate_id = $candidateID;
                    $index++;
                    $this->Skills->save($skills);

                }
            }

            for ($i = 0; $i < sizeof($jobs); $i++) {
                $this->JobHistories->delete($jobs[$i]);
            }
            $index2 = 0;
            for ($i = 0; $i < sizeof($this->request->getData()['Job']); $i++) {

                if (!isset($this->request->getData()['Job'][$index2]['title'])) {
                    $index2++;
                    $i--;
                } else {
                    $job = $this->JobHistories->newEntity();
                    $job->title = $this->request->getData()['Job'][$index2]['title'];
                    $job->candidate_id = $candidateID;
                    $job->company = $this->request->getData()['Job'][$index2]['company'];
                    $job->job_description = $this->request->getData()['Job'][$index2]['desc'];
                    $job->date_start = $this->request->getData()['Job'][$index2]['start'];
                    $job->date_finish = $this->request->getData()['Job'][$index2]['finish'];
                    $index2++;
                    $this->JobHistories->save($job);

                }
            }

            for ($i = 0; $i < sizeof($qualification); $i++) {
                $this->Qualifications->delete($qualification[$i]);
            }
            $index3 = 0;
            for ($i = 0; $i < sizeof($this->request->getData()['Qua']); $i++) {

                if (!isset($this->request->getData()['Qua'][$index3]['degree_name'])) {
                    $index3++;
                    $i--;
                } else {
                    $qua = $this->Qualifications->newEntity();
                    $qua->degree_name = $this->request->getData()['Qua'][$index3]['degree_name'];
                    $qua->candidate_id = $candidateID;
                    $qua->degree_level = $this->request->getData()['Qua'][$index3]['degree_level'];
                    $qua->expected_graduation_date = $this->request->getData()['Qua'][$index3]['expected_graduation_date'];
                    $qua->gpa = $this->request->getData()['Qua'][$index3]['gpa'];
                    $qua->major = $this->request->getData()['Qua'][$index3]['major'];
                    $qua->institution = $this->request->getData()['Qua'][$index3]['institution'];
                    $index3++;
                    $this->Qualifications->save($qua);

                }
            }
            $candidate = $this->Candidates->patchEntity($candidate, $this->request->getData());
            if ($this->request->getData()['file']['size'] > 0) {
                $myname = $this->request->getData()['file']['name'];
                $mytmp = $this->request->getData()['file']['tmp_name'];
                $mypath = "/upload/" . $myname;
                $candidate->postname = $myname;
                $candidate->postpath = $mypath;
                move_uploaded_file($mytmp, WWW_ROOT . $mypath);
            }
            if ($this->Candidates->save($candidate)) {
                $this->Flash->success(__('Your profile has been saved.'));

            }
        }


            $this->set('candidate',$candidate);
    }
}
